//!هذا درس من دورة فلاتر ل حسن فليح بعنوان Quiz App
//!هذا الملف هو نفسه ممكن ان نعتبره ملف الماين اذا اردنا تنفيذ هذا التطبيق
//!نعدل فقط اسم الملف ونسميه main

//!في هذي الدروس السبعة المسماه كويز اب
//! Quiz App 1 الى Quiz App 7
//!سوف نقوم ببناء تطبيق عبارة عن صفحة فيها سؤال ماهو لونك المفضل
//!ثم تحت السؤال يوجد عدة اجابات بحيث يختار المستخدم احد الاجابات وعند الاختيار
//!ينتقل الى صفحة اخرى فيها سؤال اخر وتحته عدة اجابات يختار اي واحد وعند الاختيار
//!ينتقل الى صفحة ثالثة ونفس الكلام وعند اخر صفحات الاسئلة ينتقل الى صفحة اخيرة
//!مكتوب فيها انتهى التطبيق ويوجد فيها زر لاعادة التطبيق من جديد
//!فيما بعد سوف نقوم بعمل درجات مع كل اجابة يختارها المستخدم
//! وفي الصفحة الاخيرة يتم جمع الاجابات ويعطية درجة معية حسب الاجابات
//!ثم في الاخير سوف نقوم بتغيير الثيم حق التطبيق

//!هذا شرح الدروس من Quiz App 1 الى Quiz App 4

//!اما الدرس الخامس شرحه في الملفات رقم 44 Quiz App 5

//في البداية سوف نقوم بتقسيم المشروع الى عدة ملفات هي ملف الماين هذا و
// main, Quiz, Answer, Question, Result
//كل ملف سوف ننشئ فيه كلاس بنفس اسم الملف بحيث اننا سوف نكتب الاكواد كلها
//في البداية في ملف الماين ثم اذا لاحظنا انه الاكواد صارت كثرة او فيها تكرار
// فاننا سوف ننقلها الى ملف اخر من احد الملفات التي ذكرناها
// بحيث اننا بعد ذلك سوف نستدعي اوبجكت منها فقط في ملف الماين

//ممكن اننا ننشئ عدد لامحدود من الاسئلة هذا التطبيق مشابه لان يكون
// اسئلة امتحان وغي الاخير نعرض الدرجة او تطبيق لمعرفة نوع الشخصية وهكذا
//الان في البداية اولا نعمل استيراد للبكج فلاتر ماتيريال
//ثم سوف نقوم بعمل كلاس يرث من استيت لس ويدجت سوف ننشئه بشكل تلقائي لتوفير الوقت
//نكتب في البداية كلمة stl
//!ثم سوف يعطينا خيار Flutter stateless widget > insert a StatelessWidget
//!نضغط عليه وسوف يضيف لنا كلاس جديد كامل بكل مكوناته يرث من استيت لس ويدجت
//!علينا فقط كتابة اسم الكلاس هنا نسميه MyApp
//نفس هذي الاكواد ننسخها الى كل الملفات اللتي عملناها وفي كل ملف نغير اسم الكلاس فقط
//الان هنا في ملف الماين بعد سطر الاستيراد نكتب الدالة ماين وبداخلها الدالة رن اب
//الان هنا في الماين سوف نحول الكلاس ماي ونجعله يرث من الكلاس استيت فل ويدجت
//لانه سوف يحتوي على معلومات قابلة للتحديث لذلك سوف نحوله
//!بان نضع المؤشر على اسم الكلاس ثم نضغط الهنت يعطينا convert to StatefulWidget
//يقوم باضافة كل مايلزم لتحويلة الى استيت فل تلقائيا
//الان نعدل الريتيرن حق الدالة بيلد ونجعلها ترجع MaterialApp
//ونضيف الهوم وبداخله نضيف السكافولد وبداخله الاب بار ومكوناته وبودي السكافولد
//ونضيف فيه كونتينر ونضيف لها عمود وبداخله نضيف المحتويات
//نضيف فيه تكست ونكتب السؤال مباشرة بداخله
//لكي نجعل النص في الوسط اول حاجة نجعل عرض الكونتينر انفنيتي لكي تاخذ عرض الشاشة
//  بالكامل ثم نجعل محاذاة النص في الوسط
//الان سوف نعدل على طريقة كتابتنا للاسئلة لان كتابتها بشكل مباشر داخل العمود خطأ
//سوف ننشئ لستة اوف سترينق اسمها كوسشن بداخل الكلاس وخارج الدالة بيلد
// ونضع فيها الاسئلة ونستدعيها برقم اندكس السؤال فقط بداخل التكست اللي داخل العمود
//كوسشن اوف زيرو Text(question[0],
//كلما نريد سؤال معين نضيف اسم اللستة ورقم اندكس السؤال فقط
//وحتى لانجلس نعدل رقم الاندكس في كل مرة اذا سوف ننشى متغير خارج الدالة بيلد يمثل
//رقم الاندكس ونعطيه قيمة صفر int questionIndex = 0;
//!اي متغير سوف نكتب بياناته مرة واحدة ولن نعدلها في المستقبل ممكن نجعل نوعه فاينال final
//!او حتى نمنع تغيير قيمته مستقبلا لذلك نعطيه نوع فاينال final
//في فلاتر لايمكن ان يكون لدينا تطبيق كامل كل اكواده في ملف واحد وانما للترتيب
//يجب ان جزئه الى عدة ملفات لذلك سوف نفصل جزء الاسئلة ونضعه في ملف مستقل question
//الان سوف ناخذ كل محتويات الكونتينر اللي في بودي السكافولد وننسخها وننقلها الى ملف
// 43.QuizApp_question_1.dart
//لا ننقل اللستة كوسشن الى ملف الاسئلة وانما نخلها هنا لاننا سوف نحتاجها هنا
//هذا كانت محتويات الكونتينر اللي نقلناها الى ملف
//43.QuizApp_question_1.dart
/*
body: Container(
          width: double.infinity, //نجعل الكونتينر بعرض الكامل الشاشة
          margin: EdgeInsets.all(10.0), //لكي يبعد عن حافة الصفحة
          child: Column(
            children: [
              Text(
                'What\'s your favorite Color ?',كتبنا بدله اللستة كوسشن
                question[0],
                style: TextStyle(fontSize: 30),
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),

*/
//الان نعمل استيراد لملف كوسشن
//ثم نعمل كونتينر في البودي وبداخل الكونتينر ننشئ اوبجكت من الكلاس كوسشن
//الان الكونستركتر يريد ان نمرر له استرينق اذا سوف نمرر له استرينق من اللستة
//اللستة كوسشن التي فيها الاسئلة ممكن ان نمرر له السؤال الاول question[0]
// Question(question[0]),
//الان ممكن ان نجعل اوبجكت الكلاس كوسشن بداخل عمود ونضيف للعمود زر الفيتد بوتن
//لكي نسجل الاجوبة على الازرار سوف نضيف ازرار بعدد الاجوبة
//الان كل جواب سوف نعمل له زر وبهكذا سوف تكثر عندنا الاكواد ويتعقد البرنامج
//لذلك سوف ننقل الالفيتد بوتون نعمل له قص وننقله الى ملف الاجوبة انسر
//هذا كان الزر اللي نقلناه الى ملف انسر
/*
body: Container(
          child: Column(
            children: [
              Question(question[0]),
              const ElevatedButton(
                  onPressed: null,
                  child: Text(
                    'Answer 1',
                    style: TextStyle(color: Colors.white, fontSize: 25),
                  ))
            ],
          ),
        ),
*/
//الان نعمل استيراد لملف الاجوبة وننشى اوبجكت من كلاس انسر في العمود تحت السؤال
//ونمرر له قيمتين استرينق ودالة بما ان الدالة هي نفسها سوف امررها في كل اوبجكت
//اعمله من الكلاس انسر اذا حتى لا اكرر الكود يجب ان اعمل دالة خارجية واستدعيها باسمها
//في كل اوبجكت من الكلاس انسر الدالة في ابسط صورها هي كالتالي
/*
void answerQuestion() {
    print('Answer chosen !');
  }

*/
//ونمررها في كل اوبجكت من الكلاس انسر Answer(answerQuestion, "Answer 1"),
//الان لو شغلنا البرنامج وضغطنا على اي اجابة سوف يطبع لنا في الكونسول
// Answer chosen !
//الان سوف نعود الى اوبجكت كلاس الاسئلة وبدل ان نمرر له السؤال الاول وكل مرة نغيره
// question[0]
//اريد ان امرر له متغير يمثل الاندكس بحيث انه كل مرة ازوده بواحد لكي يعرض لي السؤال التالي
//هذا يعني اننا سوف نمرر له المتغير int questionIndex = 0;
//الذي عملناه سابقا وهو يمثل رقم اندكس السؤال
// Question(question[questionIndex]),
//الان اريد انه كلما اضغط على الجواب ينقلني الى السؤال اللي بعده اي انني سوف
//اقوم بزيادة متغير اندكس السؤال بمقدار واحد حتى يعرض لي السؤال الثاني وهكذا
//اذا هذا المتغير سوف اقوم بزيادته في وسط بودي الدالة اكس لانها هي المسؤالة
//عن ضغطة الزر ولما اضيف العداد للدالة questionIndex += 1;
//لا اضيفه هكذا فقط وانما لازم اضعه وسط دالة ست استيت لان قيمته سوف تتغير كل مرة
//نضغط على الزر  setState() => questionIndex += 1;
//الان كل مرة نضغط على الزر حق الجواب فانه يقوم بتنفيذ الدالة اكس
//و يزيد قيمة المتغير كوسشن اندكس بمقدار واحد وهذا يعني انه ينتقل للسؤال التالي
//الان بما انه عندنا فقط سؤالين في لستة الاسئلة اذا لما نضغط على الزر في المرة الاولى
// ينقلنا الى السؤال الثاني ولما نضغط على زر الاجابة في المرة الثانية يعطينا خطا
// في التطبيق لانه زود المتغير حق اندكس كوسشن ولما مرره في اوبجكت الكلاس كوسشن
// وجد ان اللستة كوسشن لايوجد فيها عنصر ثالث لذلك اعطانا خطأ ولكي نتجنب
// هذا الخطأفاننا سوف نعمل على حل مؤقت حتى نكمل البرنامج لاحقا
// وهو اننا سوف نعمل اف شرطية بحيث انه اذا وصلت قيمة المتغير كوسشن اندكس
// الى قيمة واحد فانه يرجع قيمته الى صفر اي لما يوصل للسؤال الثاني
// فانه يرجعه الى السؤال الاول كل هذا نعمله بداخل الدالة انسركوسشن
// if (questionIndex == 1) {questionIndex =-1;}
//هنا اعطيناه سالب واحد لانه في الاسفل على طول يزوده واحد واذا اعطيناه هنا صفر
//فانه سوف يبقى في نفس السؤال لانه على طول سوف يرجع قيمته في الاسفل الى واحد مرة اخرى
//
//الان سوف نعدل على لستة الاسئلة لنجعلها اكثر تطورا ولكي تواكب تطور البرنامج
//لان اللستة الحالية مبسطة جدا ولاترقى للبرامج الكبيرة
//الان سوف اجعل اللستة كوسشن العنصر الواحد فيها عبارة عن ماب مكونة من عنصرين
//العنصر الاول (مفتاح وقيمة) المفتاح هو نص كوسشن تكست والقيمة هو نص السؤال نفسه
//والعنصر الثاني في الماب المفتاح هو نص انسرس والقيمة عبارة عن لستة من النصوص
//وهي عبارة عن الاجوبة اي ان الماب مكونة من عصرين العنصر الاول نوعه استرينق استرينق
//العنصر الثاني نوعه استرينق لست اي ان المفتاح دائما استرينق ولكن القيمة تتغير
//اي ان القيمة غير معروف نوعها لذلك سوف يكون نوعها اوبجكت وبالتالي اذا اردنا معرفة
//نوع اللست كوسشن سوف يكون نوعها لست اوف ماب اوف استرينق اوبجكت
//لكي نعرف نوع اللست ماذا اصبح نوعها نضع المؤشر على اسم اللست ثم نضغط الهنت
//ونختار Add type annotation
//! يعطينا نوع اللست كالتالي final List<Map<String, Object>> question
//اي انها صارت معقدة لست ثنائية الابعاد لانها لست بداخلها ماب وبداخل الماب عناصر اخرى
//اي انه لكي نصل الى العناصر الداخلية يجب تحديد في البعد الاول اندكس عنصر الصف الاول
// ثم في البعد الثاني تحديد العنصر الذي بداخله
//ممكن الان ان ننسخ الماب اللي عملناها ونجعلها عدة عناصر بداخل اللست بحيث
//كل ماب فيها السؤال والاجابات حقه وهكذا
//الان سوف يطلع عندي مجموعة من الاخطاء في الاماكن التي مررت فيها هذي اللست
//في الارقيومنت التي مررناها للاوبجكت من الكلاس كوسشن
// Question(question[questionIndex]),
//الان اذا تركناه هكذا فانه يصل الى العنصر الاول بالكامل وهو الماب
//لكن الماب فيها عدة اشياء ونحنا نريد منها فقط نص السؤال
//اي انه سابقا لما كان السؤال موجود مباشرة في اللستة ولكن الان اختلف
//لذلك نعدل عليها لكي نمرر السؤال لهذا الاوبجكت نجد ان السؤال بداخل الماب في القيمة
//اي اننا يجب ان نمرر المفتاح في كل عنصر في اللست هكذا
// Question(question[questionIndex]['questionText'].toString()),
//ويجب ان نحولها الى استرينق لان الاوبجكت كوسشن يحتاج ارقيومنت نوعها استرينق
//نحولها عن طريق الدالة تو استرينق او عن طريق اس استرينق .toString() او as String
//
//الان اريد ان اقوم بعرض الاجوبة الموجودة في اللستة
//التي بداخل الماب بداخل اللستة كوسشن اريد عرضها وكتابتها على الازرار التي عملتها
//اي اني اريد ان اجعل لستة الاجوبة التي بداخل الماب تمرر مكان Answer 1 ,Answer 2 ..
//في اوبجكت الكلاس انسر Answer(answerQuestion, "Answer 1"),
//وبما ان الموضوع صار الان معقد ومتداخل فاننا سوف نقوم بعملية مابينق mapping
//اي اننا سوف نستخدم الدالة ماب ونجعلها تمر على جميع عناصر لستة الاجوبة
//يجب ان احدد المكان بالضبط الذي اريدها ان تمر عليه وهو بداخل اللستة كوسشن
//ثم المفتاح انسر بالتالي الان استطيع الوصول الى لستة الاجوبة
// هذا الكود كله يعطينا لست اوف استرينق question[questionIndex]['answers']
//اللي هي لستة الاجوبة التي بداخل الماب ومفتاحها كلمة answers
//لكن قبل ان نعمل لها مابينق بالدالة ماب سوف يعطينا خطا لان نوع اللستة حق الاجوبة
//نوعها اوبجكت لاننا زي ماعرفنا في الاعلى انه جعل نوعها اوبجكت لان في اللستة
//كوسشن يوجد عناصر ماب وبداخلها جميع المفاتيح نوعها استرينق لكن القيم
// نوعها جعل نوعها اوبجكت لان فيها انواع مختلفة نوع استرينق ونوع لست
// final List<Map<String, Object>> question
//بالتالي فان الدالة ماب تريد لستة اوف استرينق لكي تمر عليها ونحن نعلم اننا
// اصلا بهذا الكود question[questionIndex]['answers']
//وصلنا الى لستة اوف استرينق لكن يجب ان نخبر الكومبايلر ان هذي هي لستة اوف سترينق
//حتى نتجنب الخطاء كالتالي
// (question[questionIndex]['answers'] as List<String>).map((){})
//طبعا هذا الكود وعملية المابينق نعملها بداخل لستة التشيلدرن في العمود
//نلاحظ انه مازال يعطينا خطا لذلك سوف نحول الناتج كله ايضا الى ليست كالتالي
//وذلك لان لستة التشيلدرن عناصرة عبارة عن ويدجت واللستة ويدجت
// (question[questionIndex]['answers'] as List<String>).map((){}).toList()
//نلاحظ ايضا انه يعطينا خطأ بالتالي سوف نستخدم النقاط الثلاث حتى يجعل لستة الاجابات
//في مستوى اللست العادية يعني كانها لست خارجية لحالها وليست لست بداخل لست بداخل ماب
//يعني هذي النقاط الثلاث كانها تستخرج اللست وتجعلها في مستوى العناصر
// التي بداخل التشيلدرن الذي وضعنا هذي اللست فيها
//! النقاط الثلاث تسمى Spread elements
// ...(question[questionIndex]['answers'] as List<String>).map((){}).toList()
//الان المتغير انسر الذي عرفناه بداخل باراميتر الدالة ماب طبعا ممكن نسميه اي شي
//سوف يمر هذا المتغير على جميع عناصر لستة الاجوبة وكل مرة سوف ياخذ قيمة عنصر
//الان المفروض ان الدالة ماب تقوم بارجاع شي
//سوف نجعلها تقوم بارجاع اوبجكت من الكلاس انسر بدل ان نكتب الاوبجكت مباشرة
// في لستة التشيلدرن هكذا
// Answer(answerQuestion, "Answer 1"),
//سوف نمرر متغير الدالة ماب مكان الارقيومنت الاسترينق الذي نمرره للاوبجكت انسر
// Answer(answerQuestion, answer),
//وسوف نجعل الدالة ماب تقوم بارجاع اوبجكت كامل من الكلاس انسر هكذا
/*
...(question[questionIndex]['answers'] as List<String>).map((answer) {
return Answer(answerQuestion, answer);}).toList(),
*/
//الان نعمل هوت ريلود للبرنامج نلاحظ انه غير جميع الاجابات حق الاسئلة في جميع الازرار
//اي انه وضع جميع الاجوبة في اماكنها
//الان ممكن ان نضيف سؤال ثالث ورابع وخامس الى مالانهاية من الاسئلة والاجابات
// بنفس الطريقة في اللستة كوسشن بدون ان نضيف اي اكواد اخرى
//فقط نضيف عناصر جديدة للستة كوسشن وكل الاجوبة سوف تمر عليها الدالة ماب
//مع ملاحظة تعديل المتغير كوسشن اندكس في الدالة انسر كوسشن وزيادة الرقم
// في اف الشرطية حى لما يوصل للسؤال الثالث يرجع الى السؤال الاول
// if (questionIndex == 2) {
//
//الان سوف نضيف صفحة اخيرة بحيث انه اذا وصلنا الى السؤال الاخير ينقلنا الى صفحة
//يكتب لنا فيها ان البرنامج انتهى وفيها زر اذا رغبت في اعادة البرنامج من جديد
//لذلك الان انا لست بحاجة الى اكواد اف الشرطية في الدالة انسر كويسشن التي
//لما نوصل الى السؤال الخير تعيدنا الى السؤال الاول
//الان بدل هذي سوف اذهب الى مكان رسم الصفحات حق الاسئلة والاجوبة وهي بداخل العمود
//اذا قبل الدخول للعمود سوف اضع شرط اتحقق فيها من هل وصلنا الى اخر صفحة او لا
//كيف اتحقق من ذلك عن طريق عداد اندكس الاسئلة لانه اذا وصل للسؤال الاخير فاعرف ان الاسئلة انتهت
//وبالتالي سوف اجعل التنفيذ ينتقل الى رسم صفحة جديدة
//اذا نضع الشرط قبل اسم العمود لكي نتحقق هل وصلنا الى اخر صفحة اول لا
//هل المتغير كوسشن اندكس اصغر من طول اللستة كوسشن اذا نعم نفذ محتويات العمود
// child:questionIndex< question.length? Column(
//واذا لا ارسم لي الويدجت تكست في الشاشة والتي سوف تطبع Done !
// ):Text('Done !',style: TextStyle(fontSize: 30),)
//ممكن ان نضع هذا التكست نعمل له احاطة بالويدجت سنتر علشان يعرض في وسط الصفحة
//الان نلاحظ ان الاكواد صارت كثيرة وزاد تعقيد البرنامج لهذا يجب ان ننقل بعض الويدجت
//الى ملف مستقل مثل العمود او الويدجت الاخير اللي يطبع النص في اخر صفحة وغيرها
//الان سوف ننقل العمود بجميع محتوياته الى ملف اخر هو ملف كويز
//سوف نجعل الارجاع للعمود بشكل مباشر في ملف كويز
//اكواد العمود قبل النقل كانت كالتالي
/*

body: Container(
            child: questionIndex < question.length? Column(
                    children: <Widget>[
                      !Question(question[questionIndex]),
                      !Question(question[questionIndex]['questionText']as String),//هذا صح
                      Question(question[questionIndex]['questionText'].toString()),//وهذا صح

                      ...(question[questionIndex]['answers'] as List<String>)
                          .map((answer) {
                        return Answer(answerQuestion, answer);
                      }).toList(),
                      !Answer((){},"Answer 1"),
                      !Answer(answerQuestion, "Answer 1"),
                      !Answer(answerQuestion, "Answer 2"),
                      !Answer(answerQuestion, "Answer 3"),
                    ],
                  )

*/
//الان نعمل اوبجكت من الكلاس كويز في نفس المكان اللي نسخنا منه العمود
// Quiz(question, questionIndex, answerQuestion)
//الان بنفس الطريقة نقوم بنسخ الويدجت سنتر التي عملناها مؤخرا بجميع محتوياتها
//ونلصقها في الملف ريسولت
//الويدجت سنتر كانت قبل عملية القص
/*
: const Center(
                  child: Text(
                    'Done !',
                    style: TextStyle(fontSize: 30),
                  ),
                ),
*/
//الان سوف نعمل اوبجكت من الكلاس ريسولت مكان الويدجت سنتر التي نقلناها الى ملف ريزلت
//الان سوف انشئ دالة اسمها ريست كويز اقوم فيها باعطاء المتغير كوسشن ريزلت القيمة صفر
//وامرر هذي الدالة في اوبجكت الكلاس ريزلت حتى يعطيها الزر
// الذي عند الضغط عليه يعيد تنفيذ البرنامج من السؤال الاول
/*
void resetQuiz() {
    setState(() {
      questionIndex = 0;
    });
  }

*/
//!الان الى هنا انتهى شرح الدروس Quiz App 1 الى Quiz App 4
//!اما الدرس الخامس سوف يتم شرحه في الملفات رقم 44
//!وهو امتداد لهذي الدروس لكن لان الاكواد سوف تتغير لذلك عملناه في ملفات لحاله
//
//
//

import '43.QuizApp_quiz_1.dart';
import '43.QuizApp_answer_1.dart';
import '43.QuizApp_question_1.dart';
import 'package:flutter/material.dart';

import '43.QuizApp_result_1.dart';

main() => runApp(MyApp());

class MyApp extends StatefulWidget {
  //هذا عبارة عن كونستركتر الكلاس ماي اب
  const MyApp({Key? key}) : super(key: key);

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  /*
  final question = [
    !اعطيناها نوع فاينال لاننا سوف ننشئها بعناصرها مرة واحدة ولن نعدل عليها
    'What\'s your favorite Color ?',
    'What\'s your favorite Animal ?',
    'What\'s your favorite color ?',
  ];
  هذي اللست استبدلناها باللست التي في الاسفل الاكثر تطورا
  */

  final List<Map<String, Object>> question = [
    {
      'questionText': 'What\'s your favorite Color ?',
      'answers': ['Black', 'Green', 'Blue', 'Yellow']
    },
    {
      'questionText': 'What\'s your favorite Animal ?',
      'answers': ['Rabbit', 'Lion', 'Camel', 'Cat']
    },
    {
      'questionText': 'What\'s your favorite Instructor ?',
      'answers': ['Mohammed 1', 'Mohammed 2', 'Mohammed 3', 'Mohammed 4']
    }
  ];

  int questionIndex = 0;

  void answerQuestion() {
    /*
    هذا سابقا استخدمناها لكي تعيدنا الى الصفحة الاولى عندما نصل الى اخر صفحة
    if (questionIndex == 2) {
      questionIndex = -1;
    }
    */
    setState() => questionIndex += 1;
    print(questionIndex);
    print('Answer chosen !');
  }

  void resetQuiz() {
    setState(() {
      questionIndex = 0;
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text("Quiz App"),
        ),
        body: Container(
            child: questionIndex < question.length
                ? Quiz(question, questionIndex, answerQuestion)
                : Result(resetQuiz)),
      ),
    );
  }
}
